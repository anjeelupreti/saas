"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os 
from decouple import config
import sentry_sdk

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#Email Configuration
EMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST=config('EMAIL_HOST',cast=str,default='smtp.gmail.com')
EMAIL_PORT=config('EMAIL_PORT',cast=str,default='587')
EMAIL_HOST_USER=config('EMAIL_HOST_USER',cast=str,default='None')
EMAIL_HOST_PASSWORD=config('EMAIL_HOST_PASSWORD',cast=str,default='None')
EMAIL_USE_TLS=config('EMAIL_USE_TLS',cast=bool,default='True')
EMAIL_USE_SSL=config('EMAIL_USE_SSL',cast=bool,default='False')

#TESTING
ADMINS=[('Anjeel','anjeelupretiofficial@gmail.com')]
MANAGERS=ADMINS
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY=config('DJANGO_SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!


#sentry integration 
sentry_sdk.init(
    dsn=config('DSN'),
    # Add data like request headers and IP for users,
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
)
#to get system variables 
#Method 1
# DEBUG=True
# DEBUG = os.getenv('DJANGO_DEBUG', 'False').strip().lower() == 'true'
#Method 2
DEBUG=config('DJANGO_DEBUG', cast=bool)
# print("DEBUG:", DEBUG)  # Debugging output

ALLOWED_HOSTS = [".railway.app"]

if DEBUG:
    ALLOWED_HOSTS = [
        "127.0.0.1",
        "localhost",
        ".railway.app",
    ]

# print("ALLOWED_HOSTS:", ALLOWED_HOSTS)  # Debugging output


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    "whitenoise.runserver_nostatic",

    # Django-Allauth (Core)
    # "allauth_ui",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "widget_tweaks",
    # "slippers", 
    'crispy_forms',
    #  'compressor',
     # 'allauth.socialaccount.providers.microsoft',
    # 'allauth.socialaccount.providers.linkedin',
    # 'allauth.socialaccount.providers.facebook',
    # 'allauth.socialaccount.providers.github',
    # 'allauth.socialaccount.providers.google',

    # Django-Allauth UI
    
    
    # Custom apps
    'visits',
    'commands',


]

SITE_ID = 1

    
ALLAUTH_UI_THEME = "light"

MIDDLEWARE = [
    
    'django.middleware.security.SecurityMiddleware',
     #Whitenoise Integration
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    #django-allauth
    "allauth.account.middleware.AccountMiddleware",
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',

    
]

SOCIALACCOUNT_PROVIDERS = {
  
}

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS':True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# print("BASE_DIR:", BASE_DIR)


WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

import dj_database_url

CONN_MAX_AGE = config('CONN_MAX_AGE', cast=int, default=30)
DATABASE_URL = config('DATABASE_URL', default=None)

if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL,
            conn_max_age=CONN_MAX_AGE,
            conn_health_checks=True,
            ssl_require=True  
        )
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#django allauth Config
AUTHENTICATION_BACKENDS = [
    
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
    
]

LOGIN_URL = '/accounts/login/'
# Redirect users after login
LOGIN_REDIRECT_URL = '/dashboard/'

ACCOUNT_LOGIN_METHOD={'email'}
ACCOUNT_EMAIL_VERIFICATION='mandatory'
ACCOUNT_EMAIL_REQUIRED=True
ACCOUNT_EMAIL_SUBJECT_PREFIX="[CodeVault]"


# Redirect users after logout
LOGOUT_REDIRECT_URL = "/"



# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_FILES_BASE_DIR=BASE_DIR / 'static'
STATIC_FILES_VENDOR_DIR=STATIC_FILES_BASE_DIR / 'vendors'

COMPRESS_ROOT = BASE_DIR / 'static'

COMPRESS_ENABLED = True

STATICFILES_FINDERS = ('compressor.finders.CompressorFinder',)

#source (s)
STATICFILES_DIRS=[
    STATIC_FILES_BASE_DIR

]
#output (s)
STATIC_ROOT =BASE_DIR.parent/'local-static'
STORAGES = {
    # ...
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}
# if not DEBUG:
#     STATIC_ROOT =BASE_DIR/'prod-static'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
